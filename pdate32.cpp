// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "pdate32.h"

// Dispatch interfaces referenced by this interface
#include "font.h"

/////////////////////////////////////////////////////////////////////////////
// CPdate32

IMPLEMENT_DYNCREATE(CPdate32, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CPdate32 properties

BOOL CPdate32::GetEnableCalendarControl()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CPdate32::SetEnableCalendarControl(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

short CPdate32::GetDateFormat()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}

void CPdate32::SetDateFormat(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}

CString CPdate32::GetSeperator()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CPdate32::SetSeperator(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

BOOL CPdate32::GetShowCentury()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CPdate32::SetShowCentury(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

DATE CPdate32::GetValue()
{
	DATE result;
	GetProperty(0x5, VT_DATE, (void*)&result);
	return result;
}

void CPdate32::SetValue(DATE propVal)
{
	SetProperty(0x5, VT_DATE, propVal);
}

DATE CPdate32::Get_Value()
{
	DATE result;
	GetProperty(0x0, VT_DATE, (void*)&result);
	return result;
}

void CPdate32::Set_Value(DATE propVal)
{
	SetProperty(0x0, VT_DATE, propVal);
}

BOOL CPdate32::GetLeadingZero()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CPdate32::SetLeadingZero(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

COleFont CPdate32::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CPdate32::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

OLE_COLOR CPdate32::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CPdate32::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

BOOL CPdate32::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CPdate32::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

OLE_COLOR CPdate32::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CPdate32::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

OLE_HANDLE CPdate32::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CPdate32::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

BOOL CPdate32::GetIgnoreKeyboard()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CPdate32::SetIgnoreKeyboard(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

short CPdate32::GetAppearance()
{
	short result;
	GetProperty(DISPID_APPEARANCE, VT_I2, (void*)&result);
	return result;
}

void CPdate32::SetAppearance(short propVal)
{
	SetProperty(DISPID_APPEARANCE, VT_I2, propVal);
}

short CPdate32::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CPdate32::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CPdate32 operations

CString CPdate32::GetDateString()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CPdate32::SetMonthLiteral(short index, LPCTSTR literal)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 index, literal);
}

void CPdate32::SetDayLiteral(short index, LPCTSTR literal)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 index, literal);
}

void CPdate32::SetAbbrvMonthLiteral(short index, LPCTSTR literal)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 index, literal);
}

void CPdate32::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
